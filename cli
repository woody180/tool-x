<?php

class Cli {

    private static $command_array = NULL;
    private static $messages;

    public static function construct($argv) {

        self::$messages = "ðŸ˜¤ try \n âž¡  php cli make:controllers blog something \n âž¡  php cli make:routes blog post";

        if ( isset($argv[1]) ) {
            if (preg_match('/:/', $argv[1])) {

                $argv_split = explode(':', $argv[1]);

                if (!isset($argv[2])) die(self::$messages);
                
                call_user_func(['Cli', $argv_split[0]], $argv_split[1], $argv[2], $argv[3] ?? '');
            }
        } else {
            echo self::$messages;
        }
    }


    private static function make(string $fileType, string $fileName, string $param = null) {

        $type = ucfirst($fileType);

        // Get file content
        $boilerPlate = call_user_func(['Cli', $fileType], $fileName, $param);

        // Check dir
        if (preg_match('/[\/]/', $fileName)) {

            $directoryArray = explode('/', $fileName);
            $index = array_key_last($directoryArray);
            $fileName = $directoryArray[$index];
            array_splice($directoryArray, $index, 1);
            $type .= '/' . join('/', $directoryArray); // New url from type

            // Construct path
            $path = __DIR__ . "/app/{$type}";

            if (!is_dir($path)) {

                // Create file
                mkdir($path, 0777, true);
            }

        }

        
        // Create file with content
        file_put_contents(__DIR__ . "/app/{$type}/{$fileName}.php", $boilerPlate);

        echo "âœ” - $fileName done! \n";
    }



    // Boilerplate for routes
    private static function routes($fileName, $param) {

        if (!$param) $param = 'get';

        return "<?php

use App\Engine\Libraries\Router;
use App\Engine\Libraries\Library;

\$router = Router::getInstance();

\$router->{$param}('{$fileName}', function(\$req, \$res) {
   
});
        ";
    }


    // BloilerPlate for controller
    private static function controllers($fileName, $param = null) {

        $param = !$param ? $fileName : $param;

return "<?php

use App\Engine\Libraries\Library;

class {$fileName}Controller {
    
    public function {$param}(\$req, \$res) {
       
    }
}
        ";
    }

}


Cli::construct($argv);